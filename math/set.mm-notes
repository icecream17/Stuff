# set.mm-notes

## Alternate proofs

bicomd: bicom1 syl
neg0: df-neg 0cn subidi eqtri

## Alternate definition of cgt

See https://js.do/celiasnt/altcgt for some proofs, but basically
here's an alternate definition of combinatorial games:

Fgen = rec((x ∈ V ↦ (𝒫 x × 𝒫 x)), ∅)
Fg = { x | ∃y ∈ ω x ∈ (Fgen’y) }

### Definition of cgt addition

Addition will be done later.
But here's the motivation for my future definition of addition:

+s means "add game with set of games"
+cg means "add two games"

Normally these are defined as:

+s = (x ∈ Fg, y ∈ 𝒫 Fg ↦ { z | ∃w ∈ y z = (x +cg w) })
+cg = (x ∈ Fg, y ∈ Fg ↦ ⟨(x +s (1st`y)) ∪ (y +s (1st`x)), (x +s (2nd`y)) ∪ (y +s (2nd`x))⟩)

The obvious problem is that these definitions depend on themselves which contrasts
with Metamath's philosophical recursion / easy substitutionally sound definition goals.

So instead define +s to allow any operator:
+sg = (O ∈ V ↦ (x ∈ Fg, y ∈ 𝒫 Fg ↦ { z | ∃w ∈ y z = (x O w) }))

Hmm that just pushes the problem to
+s = +sg`+cg
which still depends on +cg which depends on +s

Looking at
+cg = (x ∈ Fg, y ∈ Fg ↦ ⟨(x +s (1st`y)) ∪ (y +s (1st`x)), (x +s (2nd`y)) ∪ (y +s (2nd`x))⟩)

The union of (x +s (1st`y)) ∪ (y +s (1st`x)) is
{ z | (∃w ∈ (1st'y) z = (x O w) ∨ ∃w ∈ (1st'x) z = (y O w)) }

Hmm, what if we use a recursive tool on itself?
Let's define +cg with the unwrapped substitution above and a general operator argument:
+cgug = (O ∈ V ↦ (x ∈ Fg, y ∈ Fg ↦ ⟨{ z | (∃w ∈ (1st'y) z = (x O w) ∨ ∃w ∈ (1st'x) z = (y O w)) }, { u | (∃t ∈ (2nd'y) u = (x O t) ∨ ∃t ∈ (2nd'x) u = (y O t)) }⟩))

Hmm, that doesn't work either... we still need to call +cgug with the right operator,
and the right operator isn't itself, but it also isn't (x ∈ Fg, y ∈ Fg ↦ ⟨{...
since that definition has the variable O

However all that's needed is for the syntax to expand / unravel forever.

(+cgug`+cgug) takes an operator and has depth 2
((+cgug`+cgug)`(+cgug`+cgug)) has depth 4
... has depth 1024

We then define the result of addition the first time that
A((cgugdepth`N)`F)B = A((cgugdepth`suc N)`F)B

where F = (A ∈ V, B ∈ V ↦ if-(B = ∅,∅,⟨A, B⟩))

Let's try adding 0cg + 0cg
0cg = ⟨∅, ∅⟩
+cgug`F = (x ∈ Fg, y ∈ Fg ↦ ⟨{ z | (∃w ∈ (1st'y) z = (x F w) ∨ ∃w ∈ (1st'x) z = (y F w)) }, { u | (∃t ∈ (2nd'y) u = (x O t) ∨ ∃t ∈ (2nd'x) u = (y F t)) }⟩))
                                      ^ no                         ^ no                                 ^ no                          ^ no
        eval: ⟨∅, ∅⟩
+cgug`(+cgug`F) = ...
        eval: ⟨∅, ∅⟩
        
That was extremely "trivial".
Let's add 1cg + 0cg
1cg = ⟨{⟨∅, ∅⟩}, ∅⟩
0cg = ⟨∅, ∅⟩
+cgug`F = (x ∈ Fg, y ∈ Fg ↦ ⟨{ z | (∃w ∈ (1st'y) z = (x F w) ∨ ∃w ∈ (1st'x) z = (y F w)) }, { u | (∃t ∈ (2nd'y) u = (x O t) ∨ ∃t ∈ (2nd'x) u = (y F t)) }⟩))
                                      ^ no                                                              ^ no                          ^ no
        eval: ⟨{ z | ∃w ∈ (1st'x) z = (y F w) }, ∅⟩
            y and w are 0cg:
        eval: ⟨⟨0cg, 0cg⟩, ∅⟩
+cgug`(+cgug`F)
        eval: ⟨{ z | ∃w ∈ (1st'x) z = (y (+cgug`F) w) }, ∅⟩
            since earlier 0cg +cgug`F 0cg resulted in 0cg:
        eval: ⟨0cg, ∅⟩
+cgug`(+cgug`(+cgug`F))
        eval: ⟨{ z | ∃w ∈ (1st'x) z = (y +cgug`(+cgug`F) w) }, ∅⟩
            since earlier 0cg +cgug`(+cgug`F) 0cg resulted in 0cg:
        eval: ⟨0cg, ∅⟩

Wow, that also worked.
Not sure if F is guaranteed to work, I just made F up.

But in principle, through this really daunting and complicated construction, combinatorial addition can be defined.

There are more operators though...
        
